{"ast":null,"code":"import _classCallCheck from \"/Users/nusxk19/coupons-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nusxk19/coupons-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nusxk19/coupons-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nusxk19/coupons-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nusxk19/coupons-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nusxk19/coupons-fe/src/utils/Router.jsx\";\nimport React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AttractLoop from '../views/AttractLoop';\nimport API from './API';\nimport { TestComponent } from '../components/TestComponent';\nimport Config from '../config/config';\nimport PhoneNumberAuthentication from '../views/PhoneNumberIdentification';\nvar RESET_TIME = Config.resetTime * 1000;\n\nvar Router =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Router, _Component);\n\n  function Router(props) {\n    var _this;\n\n    _classCallCheck(this, Router);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Router).call(this, props));\n\n    _this.handleUserInteract = function () {\n      if (_this.reset) {\n        window.lastReset = new Date();\n        _this.reset = false;\n\n        _this.setState({\n          overtime: false\n        });\n      }\n\n      clearTimeout(_this.timer);\n      _this.timer = setTimeout(_this.navigateToAttractLoop, RESET_TIME);\n    };\n\n    _this.navigateToAttractLoop = function () {\n      var useTime = Math.abs(window.lastReset - new Date());\n      useTime -= RESET_TIME;\n      clearTimeout(_this.time);\n      _this.reset = true;\n\n      if (RESET_TIME !== 0 && Config.device === 'kiosk') {\n        API.recordTime(Config.storeNumber, useTime);\n        sessionStorage.setItem('Phone-number', '');\n\n        _this.setState({\n          overtime: true\n        });\n      }\n    };\n\n    _this.timer = null;\n    _this.reset = true;\n    _this.state = {\n      overtime: false\n    };\n    return _this;\n  }\n\n  _createClass(Router, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      sessionStorage.setItem('Phone-Number', '');\n    }\n    /**\n     * This method runs whenever the screen is tapped (or clicked). It checks to see if this is the\n     * first touch since reset. If it is then it stores a date object and sets reset to false. It then\n     * starts the timer.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(HashRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.handleUserInteract,\n        onKeyDown: this.handleUserInteract,\n        onScroll: this.handleUserInteract,\n        role: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: AttractLoop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/phoneauthentication\",\n        component: PhoneNumberAuthentication,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Router;\n}(Component);\n\nexport default Router;","map":{"version":3,"sources":["/Users/nusxk19/coupons-fe/src/utils/Router.jsx"],"names":["React","Component","HashRouter","Route","Switch","AttractLoop","API","TestComponent","Config","PhoneNumberAuthentication","RESET_TIME","resetTime","Router","props","handleUserInteract","reset","window","lastReset","Date","setState","overtime","clearTimeout","timer","setTimeout","navigateToAttractLoop","useTime","Math","abs","time","device","recordTime","storeNumber","sessionStorage","setItem","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,MAA5B,QAA0C,kBAA1C;AACA,OAAOC,WAAP,MAAyB,sBAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,aAAR,QAA4B,6BAA5B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,yBAAP,MAAuC,oCAAvC;AAGA,IAAMC,UAAU,GAAGF,MAAM,CAACG,SAAP,GAAmB,IAAtC;;IAEMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;;AADiB,UAkBnBC,kBAlBmB,GAkBE,YAAM;AACzB,UAAI,MAAKC,KAAT,EAAgB;AACdC,QAAAA,MAAM,CAACC,SAAP,GAAmB,IAAIC,IAAJ,EAAnB;AACA,cAAKH,KAAL,GAAa,KAAb;;AACA,cAAKI,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD;;AACDC,MAAAA,YAAY,CAAC,MAAKC,KAAN,CAAZ;AACA,YAAKA,KAAL,GAAaC,UAAU,CAAC,MAAKC,qBAAN,EAA6Bd,UAA7B,CAAvB;AACD,KA1BkB;;AAAA,UAmCnBc,qBAnCmB,GAmCK,YAAM;AAC5B,UAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASX,MAAM,CAACC,SAAP,GAAmB,IAAIC,IAAJ,EAA5B,CAAd;AACAO,MAAAA,OAAO,IAAIf,UAAX;AACAW,MAAAA,YAAY,CAAC,MAAKO,IAAN,CAAZ;AACA,YAAKb,KAAL,GAAa,IAAb;;AACA,UAAIL,UAAU,KAAK,CAAf,IAAoBF,MAAM,CAACqB,MAAP,KAAkB,OAA1C,EAAmD;AACjDvB,QAAAA,GAAG,CAACwB,UAAJ,CAAetB,MAAM,CAACuB,WAAtB,EAAmCN,OAAnC;AACAO,QAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuC,EAAvC;;AACA,cAAKd,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD;AACF,KA/CkB;;AAEjB,UAAKE,KAAL,GAAa,IAAb;AACA,UAAKP,KAAL,GAAa,IAAb;AACA,UAAKmB,KAAL,GAAa;AACXd,MAAAA,QAAQ,EAAE;AADC,KAAb;AAJiB;AAOlB;;;;yCAEoB;AACnBY,MAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuC,EAAvC;AACD;AAED;;;;;;;;6BAqCS;AACP,aACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAKnB,kBADhB;AAEE,QAAA,SAAS,EAAE,KAAKA,kBAFlB;AAGE,QAAA,QAAQ,EAAE,KAAKA,kBAHjB;AAIE,QAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAIT,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAE,sBAAnB;AAA2C,QAAA,SAAS,EAAEI,yBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAPF,CADF,CADF;AAiBD;;;;EArEkBR,S;;AAwErB,eAAeW,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport AttractLoop from  '../views/AttractLoop';\nimport API from './API';\nimport {TestComponent} from '../components/TestComponent';\nimport Config from '../config/config';\nimport PhoneNumberAuthentication from  '../views/PhoneNumberIdentification'\n\n\nconst RESET_TIME = Config.resetTime * 1000;\n\nclass Router extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n    this.reset = true;\n    this.state = {\n      overtime: false,\n    };\n  }\n\n  componentWillMount() {\n    sessionStorage.setItem('Phone-Number', '');\n  }\n\n  /**\n   * This method runs whenever the screen is tapped (or clicked). It checks to see if this is the\n   * first touch since reset. If it is then it stores a date object and sets reset to false. It then\n   * starts the timer.\n   */\n  handleUserInteract = () => {\n    if (this.reset) {\n      window.lastReset = new Date();\n      this.reset = false;\n      this.setState({ overtime: false });\n    }\n    clearTimeout(this.timer);\n    this.timer = setTimeout(this.navigateToAttractLoop, RESET_TIME);\n  };\n\n  /**\n   * This method runs when the timeout gets through a complete cycle. We then calculate the amount\n   * of time that the user has been browsing minus or timeout time (aka RESET_TIME). It then will\n   * make an API post request to the server and then route the user back to the attract loop page.\n   * The exception to the last sentence is if the RESET_TIME is equal to 0. This is for development\n   * purposes.\n   */\n  navigateToAttractLoop = () => {\n    let useTime = Math.abs(window.lastReset - new Date());\n    useTime -= RESET_TIME;\n    clearTimeout(this.time);\n    this.reset = true;\n    if (RESET_TIME !== 0 && Config.device === 'kiosk') {\n      API.recordTime(Config.storeNumber, useTime);\n      sessionStorage.setItem('Phone-number', '');\n      this.setState({\n        overtime: true,\n      });\n    }\n  };\n\n\n  render() {\n    return (\n      <HashRouter>\n        <div\n          onClick={this.handleUserInteract}\n          onKeyDown={this.handleUserInteract}\n          onScroll={this.handleUserInteract}\n          role=\"button\"\n        >\n        \n          <Switch>\n            <Route exact path=\"/\" component = {AttractLoop}/>\n            <Route exact path =\"/phoneauthentication\"  component={PhoneNumberAuthentication}/>\n\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Router;\n"]},"metadata":{},"sourceType":"module"}