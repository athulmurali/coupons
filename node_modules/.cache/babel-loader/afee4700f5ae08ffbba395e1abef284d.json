{"ast":null,"code":"import _classCallCheck from \"/Users/nufxs34/Develop/coupons-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nufxs34/Develop/coupons-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nufxs34/Develop/coupons-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nufxs34/Develop/coupons-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nufxs34/Develop/coupons-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nufxs34/Develop/coupons-fe/src/utils/Router.jsx\";\nimport React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport WelcomeScreen from '../views/WelcomeScreen';\nimport Config from '../config/config';\nimport { ThemeProvider } from 'styled-components';\nimport Themes from '../config/themes';\nvar RESET_TIME = Config.resetTime * 1000;\n\nvar Router =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Router, _Component);\n\n  function Router(props) {\n    var _this;\n\n    _classCallCheck(this, Router);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Router).call(this, props));\n\n    _this.handleUserInteract = function () {\n      if (_this.reset) {\n        window.lastReset = new Date();\n        _this.reset = false;\n\n        _this.setState({\n          overtime: false\n        });\n      }\n\n      clearTimeout(_this.timer);\n      _this.timer = setTimeout(_this.navigateToAttractLoop, RESET_TIME);\n    };\n\n    _this.timer = null;\n    _this.reset = true;\n    _this.state = {\n      overtime: false\n    };\n    return _this;\n  } // componentWillMount() {\n  //   sessionStorage.setItem('searchTerm', '');\n  // }\n\n  /**\n   * This method runs whenever the screen is tapped (or clicked). It checks to see if this is the\n   * first touch since reset. If it is then it stores a date object and sets reset to false. It then\n   * starts the timer.\n   */\n\n\n  _createClass(Router, [{\n    key: \"render\",\n\n    /**\n     * This method runs when the timeout gets through a complete cycle. We then calculate the amount\n     * of time that the user has been browsing minus or timeout time (aka RESET_TIME). It then will\n     * make an API post request to the server and then route the user back to the attract loop page.\n     * The exception to the last sentence is if the RESET_TIME is equal to 0. This is for development\n     * purposes.\n     */\n    // navigateToAttractLoop = () => {\n    //   let useTime = Math.abs(window.lastReset - new Date());\n    //   useTime -= RESET_TIME;\n    //   clearTimeout(this.time);\n    //   this.reset = true;\n    //   if (RESET_TIME !== 0 && Config.device === 'kiosk') {\n    //     API.recordTime(Config.storeNumber, useTime);\n    //     sessionStorage.setItem('searchTerm', '');\n    //     this.setState({\n    //       overtime: true,\n    //     });\n    //   }\n    // };\n    value: function render() {\n      return React.createElement(ThemeProvider, {\n        theme: Themes[Config.brand],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(HashRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.handleUserInteract,\n        onKeyDown: this.handleUserInteract,\n        onScroll: this.handleUserInteract,\n        role: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: SelectStorePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Router;\n}(Component);\n\nexport default Router;","map":{"version":3,"sources":["/Users/nufxs34/Develop/coupons-fe/src/utils/Router.jsx"],"names":["React","Component","HashRouter","Route","Switch","WelcomeScreen","Config","ThemeProvider","Themes","RESET_TIME","resetTime","Router","props","handleUserInteract","reset","window","lastReset","Date","setState","overtime","clearTimeout","timer","setTimeout","navigateToAttractLoop","state","brand","SelectStorePage"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,MAA5B,QAA0C,kBAA1C;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,IAAMC,UAAU,GAAGH,MAAM,CAACI,SAAP,GAAmB,IAAtC;;IAEMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;;AADiB,UAkBnBC,kBAlBmB,GAkBE,YAAM;AACzB,UAAI,MAAKC,KAAT,EAAgB;AACdC,QAAAA,MAAM,CAACC,SAAP,GAAmB,IAAIC,IAAJ,EAAnB;AACA,cAAKH,KAAL,GAAa,KAAb;;AACA,cAAKI,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD;;AACDC,MAAAA,YAAY,CAAC,MAAKC,KAAN,CAAZ;AACA,YAAKA,KAAL,GAAaC,UAAU,CAAC,MAAKC,qBAAN,EAA6Bd,UAA7B,CAAvB;AACD,KA1BkB;;AAEjB,UAAKY,KAAL,GAAa,IAAb;AACA,UAAKP,KAAL,GAAa,IAAb;AACA,UAAKU,KAAL,GAAa;AACXL,MAAAA,QAAQ,EAAE;AADC,KAAb;AAJiB;AAOlB,G,CAED;AACA;AACA;;AAEA;;;;;;;;;;AAeA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACP,aACE,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAEX,MAAM,CAACF,MAAM,CAACmB,KAAR,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAKZ,kBADhB;AAEE,QAAA,SAAS,EAAE,KAAKA,kBAFlB;AAGE,QAAA,QAAQ,EAAE,KAAKA,kBAHjB;AAIE,QAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAEa,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CANF,CADF,CADF,CADF;AAgBD;;;;EAnEkBzB,S;;AAsErB,eAAeU,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport WelcomeScreen from '../views/WelcomeScreen';\nimport Config from '../config/config';\nimport { ThemeProvider } from 'styled-components';\nimport Themes from '../config/themes';\n\nconst RESET_TIME = Config.resetTime * 1000;\n\nclass Router extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n    this.reset = true;\n    this.state = {\n      overtime: false,\n    };\n  }\n\n  // componentWillMount() {\n  //   sessionStorage.setItem('searchTerm', '');\n  // }\n\n  /**\n   * This method runs whenever the screen is tapped (or clicked). It checks to see if this is the\n   * first touch since reset. If it is then it stores a date object and sets reset to false. It then\n   * starts the timer.\n   */\n  handleUserInteract = () => {\n    if (this.reset) {\n      window.lastReset = new Date();\n      this.reset = false;\n      this.setState({ overtime: false });\n    }\n    clearTimeout(this.timer);\n    this.timer = setTimeout(this.navigateToAttractLoop, RESET_TIME);\n  };\n\n  /**\n   * This method runs when the timeout gets through a complete cycle. We then calculate the amount\n   * of time that the user has been browsing minus or timeout time (aka RESET_TIME). It then will\n   * make an API post request to the server and then route the user back to the attract loop page.\n   * The exception to the last sentence is if the RESET_TIME is equal to 0. This is for development\n   * purposes.\n   */\n  // navigateToAttractLoop = () => {\n  //   let useTime = Math.abs(window.lastReset - new Date());\n  //   useTime -= RESET_TIME;\n  //   clearTimeout(this.time);\n  //   this.reset = true;\n  //   if (RESET_TIME !== 0 && Config.device === 'kiosk') {\n  //     API.recordTime(Config.storeNumber, useTime);\n  //     sessionStorage.setItem('searchTerm', '');\n  //     this.setState({\n  //       overtime: true,\n  //     });\n  //   }\n  // };\n\n  render() {\n    return (\n      <ThemeProvider theme={Themes[Config.brand]}>\n        <HashRouter>\n          <div\n            onClick={this.handleUserInteract}\n            onKeyDown={this.handleUserInteract}\n            onScroll={this.handleUserInteract}\n            role=\"button\"\n          >\n            <Switch>\n              <Route exact path=\"/\" component={SelectStorePage} />\n            </Switch>\n          </div>\n        </HashRouter>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default Router;\n"]},"metadata":{},"sourceType":"module"}